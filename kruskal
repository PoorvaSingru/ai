def find(parent, i):
    if parent[i] != i:
        parent[i] = find(parent, parent[i])
    return parent[i]

def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    else:
        parent[yroot] = xroot
        if rank[xroot] == rank[yroot]:
            rank[xroot] += 1

def kruskal(edges, n):
    edges.sort()
    parent = list(range(n))
    rank = [0] * n
    mst_cost = 0
    for cost, u, v in edges:
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            mst_cost += cost
    print("Total MST cost:", mst_cost)

# User input
edges = []
nodes = []
n = int(input("Enter number of nodes: "))
for _ in range(n):
    node = input("Enter node name: ")
    nodes.append(node)

m = int(input("Enter number of edges: "))
for _ in range(m):
    u = input("Enter from node: ")
    v = input("Enter to node: ")
    cost = int(input("Enter cost: "))
    u_index = nodes.index(u)
    v_index = nodes.index(v)
    edges.append((cost, u_index, v_index))

kruskal(edges, n)
