def is_safe(board, row, col, n):
    # Check column
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == abs(i - row):
            return False
    return True

def solve_nqueens(board, row, n):
    if row == n:
        print_board(board, n)
        return True
    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row] = col
            res = solve_nqueens(board, row + 1, n) or res
            board[row] = -1
    return res

def print_board(board, n):
    for i in range(n):
        row = ['.' for _ in range(n)]
        row[board[i]] = 'Q'
        print(" ".join(row))
    print()

n = int(input("Enter number of queens (n): "))
board = [-1] * n
solve_nqueens(board, 0, n)
