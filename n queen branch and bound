class NQueensBB:
    def __init__(self, n):
        self.n = n
        self.board = [-1] * n
        self.count = 0

    def is_safe(self, row, col):
        for i in range(row):
            if self.board[i] == col or abs(self.board[i] - col) == abs(i - row):
                return False
        return True

    def solve(self, row):
        if row == self.n:
            self.count += 1
            self.print_board()
            return
        for col in range(self.n):
            if self.is_safe(row, col):
                self.board[row] = col
                self.solve(row + 1)
                self.board[row] = -1

    def print_board(self):
        for i in range(self.n):
            row = ['.' for _ in range(self.n)]
            row[self.board[i]] = 'Q'
            print(" ".join(row))
        print()

n = int(input("Enter number of queens (n): "))
solver = NQueensBB(n)
solver.solve(0)
print(f"Total solutions: {solver.count}")
